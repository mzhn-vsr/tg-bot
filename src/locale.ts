type Locale = Record<string, string>;

const locale = {
  message_welcome:
    "–ü—Ä–∏–≤–µ—Ç\\! –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Rutube –Ω–∞ —Å–≤—è–∑–∏ üëã\n\n–ü–æ–º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∞–º—ã–µ –∫–∞–≤–µ—Ä–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\\!\n\n–ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\\!\n–ù–∞–ø—Ä–∏–º–µ—Ä\\: `–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ?`",
  message_error: "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –±—ã–ª –Ω–µ –≤–æ–ø—Ä–æ—Å üò¢\n\n–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑!",
  message_server_error: "–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(",
  message_new: "–ù–∞—á–Ω–µ–º –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞! –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å.",
  message_unknown_payload:
    "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\\! –°–¥–µ–ª–∞—é –≤–∏–¥, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–µ–ª üëÄ",
} satisfies Locale;
type AvailableLocaleKeys = keyof typeof locale;

export const _ = (
  key: AvailableLocaleKeys,
  replacements?: Record<string, any>
) => {
  if (key in locale) {
    let val = locale[key];
    if (!replacements) return val;
    for (const [key, value] of Object.entries(replacements)) {
      val = val.replace(`%${key}%`, value);
    }
    return val;
  }
  throw new Error(`Unknown locale key: ${key}`);
};
